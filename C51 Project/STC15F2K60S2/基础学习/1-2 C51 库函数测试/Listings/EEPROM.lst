C51 COMPILER V9.59.0.0   EEPROM                                                            12/29/2023 20:34:27 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN .\Objects\EEPROM.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE PARK\EEPROM.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Hardware;.\System;.\User
                    -;.\PARK) DEBUG OBJECTEXTEND PRINT(.\Listings\EEPROM.lst) OBJECT(.\Objects\EEPROM.obj)

line level    source

   1          
   2          //      本程序是STC系列的内置EEPROM读写程序。
   3          
   4          #include "config.h"
   5          #include "eeprom.h"
   6          
   7          
   8          //========================================================================
   9          // 函数: void   ISP_Disable(void)
  10          // 描述: 禁止访问ISP/IAP.
  11          // 参数: non.
  12          // 返回: non.
  13          // 版本: V1.0, 2012-10-22
  14          //========================================================================
  15          void    DisableEEPROM(void)
  16          {
  17   1              ISP_CONTR = 0;                  //禁止ISP/IAP操作
  18   1              ISP_CMD   = 0;                  //去除ISP/IAP命令
  19   1              ISP_TRIG  = 0;                  //防止ISP/IAP命令误触发
  20   1              ISP_ADDRH = 0xff;               //清0地址高字节
  21   1              ISP_ADDRL = 0xff;               //清0地址低字节，指向非EEPROM区，防止误操作
  22   1      }
  23          
  24          //========================================================================
  25          // 函数: void EEPROM_read_n(u16 EE_address,u8 *DataAddress,u16 number)
  26          // 描述: 从指定EEPROM首地址读出n个字节放指定的缓冲.
  27          // 参数: EE_address:  读出EEPROM的首地址.
  28          //       DataAddress: 读出数据放缓冲的首地址.
  29          //       number:      读出的字节长度.
  30          // 返回: non.
  31          // 版本: V1.0, 2012-10-22
  32          //========================================================================
  33          
  34          void EEPROM_read_n(u16 EE_address,u8 *DataAddress,u16 number)
  35          {
  36   1              EA = 0;         //禁止中断
  37   1              ISP_CONTR = (ISP_EN + ISP_WAIT_FREQUENCY);      //设置等待时间，允许ISP/IAP操作，送一次就够
  38   1              ISP_READ();                                                                     //送字节读命令，命令不需改变时，不需重新送命令
  39   1              do
  40   1              {
  41   2                      ISP_ADDRH = EE_address / 256;           //送地址高字节（地址需要改变时才需重新送地址）
  42   2                      ISP_ADDRL = EE_address % 256;           //送地址低字节
  43   2                      ISP_TRIG();                                                     //先送5AH，再送A5H到ISP/IAP触发寄存器，每次都需要如此
  44   2                                                                                              //送完A5H后，ISP/IAP命令立即被触发启动
  45   2                                                                                              //CPU等待IAP完成后，才会继续执行程序。
  46   2                      _nop_();
  47   2                      *DataAddress = ISP_DATA;                        //读出的数据送往
  48   2                      EE_address++;
  49   2                      DataAddress++;
  50   2              }while(--number);
  51   1      
  52   1              DisableEEPROM();
  53   1              EA = 1;         //重新允许中断
  54   1      }
C51 COMPILER V9.59.0.0   EEPROM                                                            12/29/2023 20:34:27 PAGE 2   

  55          
  56          
  57          /******************** 扇区擦除函数 *****************/
  58          //========================================================================
  59          // 函数: void EEPROM_SectorErase(u16 EE_address)
  60          // 描述: 把指定地址的EEPROM扇区擦除.
  61          // 参数: EE_address:  要擦除的扇区EEPROM的地址.
  62          // 返回: non.
  63          // 版本: V1.0, 2013-5-10
  64          //========================================================================
  65          void EEPROM_SectorErase(u16 EE_address)
  66          {
  67   1              EA = 0;         //禁止中断
  68   1                                                                                              //只有扇区擦除，没有字节擦除，512字节/扇区。
  69   1                                                                                              //扇区中任意一个字节地址都是扇区地址。
  70   1              ISP_ADDRH = EE_address / 256;                   //送扇区地址高字节（地址需要改变时才需重新送地址）
  71   1              ISP_ADDRL = EE_address % 256;                   //送扇区地址低字节
  72   1              ISP_CONTR = (ISP_EN + ISP_WAIT_FREQUENCY);      //设置等待时间，允许ISP/IAP操作，送一次就够
  73   1              ISP_ERASE();                                                    //送扇区擦除命令，命令不需改变时，不需重新送命令
  74   1              ISP_TRIG();
  75   1              _nop_();
  76   1              DisableEEPROM();
  77   1              EA = 1;         //重新允许中断
  78   1      }
  79          
  80          //========================================================================
  81          // 函数: void EEPROM_write_n(u16 EE_address,u8 *DataAddress,u16 number)
  82          // 描述: 把缓冲的n个字节写入指定首地址的EEPROM.
  83          // 参数: EE_address:  写入EEPROM的首地址.
  84          //       DataAddress: 写入源数据的缓冲的首地址.
  85          //       number:      写入的字节长度.
  86          // 返回: non.
  87          // 版本: V1.0, 2012-10-22
  88          //========================================================================
  89          void EEPROM_write_n(u16 EE_address,u8 *DataAddress,u16 number)
  90          {
  91   1              EA = 0;         //禁止中断
  92   1      
  93   1              ISP_CONTR = (ISP_EN + ISP_WAIT_FREQUENCY);      //设置等待时间，允许ISP/IAP操作，送一次就够
  94   1              ISP_WRITE();                                                    //送字节写命令，命令不需改变时，不需重新送命令
  95   1              do
  96   1              {
  97   2                      ISP_ADDRH = EE_address / 256;           //送地址高字节（地址需要改变时才需重新送地址）
  98   2                      ISP_ADDRL = EE_address % 256;           //送地址低字节
  99   2                      ISP_DATA  = *DataAddress;                       //送数据到ISP_DATA，只有数据改变时才需重新送
 100   2                      ISP_TRIG();
 101   2                      _nop_();
 102   2                      EE_address++;
 103   2                      DataAddress++;
 104   2              }while(--number);
 105   1      
 106   1              DisableEEPROM();
 107   1              EA = 1;         //重新允许中断
 108   1      }
 109          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    167    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.59.0.0   EEPROM                                                            12/29/2023 20:34:27 PAGE 3   

   DATA SIZE        =   ----      14
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
