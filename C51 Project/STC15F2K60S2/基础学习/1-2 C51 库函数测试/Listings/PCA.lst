C51 COMPILER V9.59.0.0   PCA                                                               12/29/2023 20:34:28 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE PCA
OBJECT MODULE PLACED IN .\Objects\PCA.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE PARK\PCA.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Hardware;.\System;.\User;.\
                    -PARK) DEBUG OBJECTEXTEND PRINT(.\Listings\PCA.lst) OBJECT(.\Objects\PCA.obj)

line level    source

   1          
   2          #include        "PCA.h"
   3          
   4          bit             B_Capture0,B_Capture1,B_Capture2;
   5          u8              PCA0_mode,PCA1_mode,PCA2_mode;
   6          u16             CCAP0_tmp,PCA_Timer0;
   7          u16             CCAP1_tmp,PCA_Timer1;
   8          u16             CCAP2_tmp,PCA_Timer2;
   9          
  10          /*************  功能说明        **************
  11          
  12          
  13          ******************************************/
  14          
  15          u16     PWM0_low;       //PWM输出低电平的PCA时钟脉冲个数, 用户层不可见。
  16          u16     PWM1_low;       //PWM输出低电平的PCA时钟脉冲个数, 用户层不可见。
  17          u16     PWM2_low;       //PWM输出低电平的PCA时钟脉冲个数, 用户层不可见。
  18          
  19          
  20          //========================================================================
  21          // 函数: void PWMn_SetHighReg(unsigned int high)
  22          // 描述: 更新占空比数据。
  23          // 参数: high:  占空比数据，即PWM输出高电平的PCA时钟脉冲个数。
  24          // 返回: 无
  25          // 版本: VER1.0
  26          // 日期: 2013-5-15
  27          // 备注: 
  28          //========================================================================
  29          void PWMn_Update(u8 PCA_id, u16 high)
  30          {
  31   1              if(PCA_id == PCA0)
  32   1              {
  33   2                      if(high > PWM0_HIGH_MAX)        high = PWM0_HIGH_MAX;   //如果写入大于最大占空比数据，强制为最大占空比。
  34   2                      if(high < PWM0_HIGH_MIN)        high = PWM0_HIGH_MIN;   //如果写入小于最小占空比数据，则返回错误代码2。
  35   2                      CR = 0;                                                 //停止PCA。
  36   2                      PCA_Timer0 = high;                              //数据在正确范围，则装入占空比寄存器。
  37   2                      PWM0_low = PWM0_DUTY - high;    //计算并保存PWM输出低电平的PCA时钟脉冲个数。
  38   2                      CR = 1;                                                 //启动PCA。
  39   2              }
  40   1              else if(PCA_id == PCA1)
  41   1              {
  42   2                      if(high > PWM1_HIGH_MAX)        high = PWM1_HIGH_MAX;   //如果写入大于最大占空比数据，强制为最大占空比。
  43   2                      if(high < PWM1_HIGH_MIN)        high = PWM1_HIGH_MIN;   //如果写入小于最小占空比数据，则返回错误代码2。
  44   2                      CR = 0;                                                 //停止PCA。
  45   2                      PCA_Timer1 = high;                              //数据在正确范围，则装入占空比寄存器。
  46   2                      PWM1_low = PWM1_DUTY - high;    //计算并保存PWM输出低电平的PCA时钟脉冲个数。
  47   2                      CR = 1;                                                 //启动PCA。
  48   2              }
  49   1              else if(PCA_id == PCA2)
  50   1              {
  51   2                      if(high > PWM2_HIGH_MAX)                high = PWM2_HIGH_MAX;   //如果写入大于最大占空比数据，强制为最大占空比。
  52   2                      if(high < PWM2_HIGH_MIN)                high = PWM2_HIGH_MIN;   //如果写入小于最小占空比数据，则返回错误代码2。
  53   2                      CR = 0;                                         //停止PCA。
  54   2                      PCA_Timer2 = high;                                              //数据在正确范围，则装入占空比寄存器。
C51 COMPILER V9.59.0.0   PCA                                                               12/29/2023 20:34:28 PAGE 2   

  55   2                      PWM2_low = PWM2_DUTY - high;                            //计算并保存PWM输出低电平的PCA时钟脉冲个数。
  56   2                      CR = 1;                                         //启动PCA。
  57   2              }
  58   1      }
  59          
  60          
  61          
  62          //========================================================================
  63          // 函数: UpdatePwm(u8 PCA_id, u8 pwm_value)
  64          // 描述: 更新PWM值. 
  65          // 参数: PCA_id: PCA序号. 取值 PCA0,PCA1,PCA2,PCA_Counter
  66          //               pwm_value: pwm值, 这个值是输出低电平的时间.
  67          // 返回: none.
  68          // 版本: V1.0, 2012-11-22
  69          //========================================================================
  70          /*
  71          void    UpdatePwm(u8 PCA_id, u8 pwm_value)
  72          {
  73                  if(PCA_id == PCA0)              CCAP0H = pwm_value;
  74                  else if(PCA_id == PCA1) CCAP1H = pwm_value;
  75                  else if(PCA_id == PCA2) CCAP2H = pwm_value;
  76          }
  77          */
  78          
  79          //========================================================================
  80          // 函数: void   PCA_Init(PCA_id, PCA_InitTypeDef *PCAx)
  81          // 描述: PCA初始化程序.
  82          // 参数: PCA_id: PCA序号. 取值 PCA0,PCA1,PCA2,PCA_Counter
  83          //               PCAx: 结构参数,请参考PCA.h里的定义.
  84          // 返回: none.
  85          // 版本: V1.0, 2012-11-22
  86          //========================================================================
  87          void    PCA_Init(u8 PCA_id, PCA_InitTypeDef *PCAx)
  88          {
  89   1              if(PCA_id > PCA_Counter)        return;         //id错误
  90   1      
  91   1              if(PCA_id == PCA_Counter)                       //设置公用Counter
  92   1              {
  93   2                      CR = 0;
  94   2                      CH = 0;
  95   2                      CL = 0;
  96   2                      AUXR1 = (AUXR1 & ~(3<<4)) | PCAx->PCA_IoUse;                    //切换IO口
  97   2                      CMOD  = (CMOD  & ~(7<<1)) | PCAx->PCA_Clock;                    //选择时钟源
  98   2                      CMOD  = (CMOD  & ~1) | (PCAx->PCA_Interrupt_Mode & 1);  //ECF
  99   2                      if(PCAx->PCA_Polity == PolityHigh)              PPCA = 1;       //高优先级中断
 100   2                      else                                                                    PPCA = 0;       //低优先级中断
 101   2                      CR = 1;
 102   2                      return;
 103   2              }
 104   1      
 105   1              PCAx->PCA_Interrupt_Mode &= (3<<4) + 1;
 106   1              if(PCAx->PCA_Mode >= PCA_Mode_SoftTimer)        PCAx->PCA_Interrupt_Mode &= ~(3<<4);
 107   1      
 108   1              if(PCA_id == PCA0)
 109   1              {
 110   2                      CCAPM0    = PCAx->PCA_Mode | PCAx->PCA_Interrupt_Mode;  //工作模式, 中断模式
 111   2                      PCA_PWM0  = (PCA_PWM0 & ~(3<<6)) | PCAx->PCA_PWM_Wide;  //PWM宽度
 112   2      
 113   2                      PCA_Timer0 = PCAx->PCA_Value;
 114   2                      B_Capture0 = 0;
 115   2                      PCA0_mode = PCAx->PCA_Mode;
 116   2                      CCAP0_tmp = PCA_Timer0;
C51 COMPILER V9.59.0.0   PCA                                                               12/29/2023 20:34:28 PAGE 3   

 117   2                      CCAP0L = (u8)CCAP0_tmp;                 //将影射寄存器写入捕获寄存器，先写CCAP0L
 118   2                      CCAP0H = (u8)(CCAP0_tmp >> 8);  //后写CCAP0H
 119   2              }
 120   1              if(PCA_id == PCA1)
 121   1              {
 122   2                      CCAPM1    = PCAx->PCA_Mode | PCAx->PCA_Interrupt_Mode;
 123   2                      PCA_PWM1  = (PCA_PWM1 & ~(3<<6)) | PCAx->PCA_PWM_Wide;
 124   2      
 125   2                      PCA_Timer1 = PCAx->PCA_Value;
 126   2                      B_Capture1 = 0;
 127   2                      PCA1_mode = PCAx->PCA_Mode;
 128   2                      CCAP1_tmp = PCA_Timer1;
 129   2                      CCAP1L = (u8)CCAP1_tmp;                 //将影射寄存器写入捕获寄存器，先写CCAP0L
 130   2                      CCAP1H = (u8)(CCAP1_tmp >> 8);  //后写CCAP0H
 131   2              }
 132   1              if(PCA_id == PCA2)
 133   1              {
 134   2                      CCAPM2    = PCAx->PCA_Mode | PCAx->PCA_Interrupt_Mode;
 135   2                      PCA_PWM2  = (PCA_PWM2 & ~(3<<6)) | PCAx->PCA_PWM_Wide;
 136   2      
 137   2                      PCA_Timer2 = PCAx->PCA_Value;
 138   2                      B_Capture2 = 0;
 139   2                      PCA2_mode = PCAx->PCA_Mode;
 140   2                      CCAP2_tmp = PCA_Timer2;
 141   2                      CCAP2L = (u8)CCAP2_tmp;                 //将影射寄存器写入捕获寄存器，先写CCAP0L
 142   2                      CCAP2H = (u8)(CCAP2_tmp >> 8);  //后写CCAP0H
 143   2              }
 144   1      }
 145          
 146          
 147          //========================================================================
 148          // 函数: void   PCA_Handler (void) interrupt PCA_VECTOR
 149          // 描述: PCA中断处理程序.
 150          // 参数: None
 151          // 返回: none.
 152          // 版本: V1.0, 2012-11-22
 153          //========================================================================
 154          void    PCA_Handler (void) interrupt PCA_VECTOR
 155          {
 156   1              if(CCF0)                //PCA模块0中断
 157   1              {
 158   2                      CCF0 = 0;               //清PCA模块0中断标志
 159   2                      if(P25) CCAP0_tmp += PCA_Timer0;        //输出为高电平，则给影射寄存器装载高电平时间长度
 160   2                      else    CCAP0_tmp += PWM0_low;  //输出为低电平，则给影射寄存器装载低电平时间长度
 161   2                      CCAP0L = (u8)CCAP0_tmp;                 //将影射寄存器写入捕获寄存器，先写CCAP0L
 162   2                      CCAP0H = (u8)(CCAP0_tmp >> 8);  //后写CCAP0H
 163   2              }
 164   1      
 165   1              if(CCF1)        //PCA模块1中断
 166   1              {
 167   2                      CCF1 = 0;               //清PCA模块1中断标志
 168   2                      if(P26) CCAP1_tmp += PCA_Timer1;        //输出为高电平，则给影射寄存器装载高电平时间长度
 169   2                      else    CCAP1_tmp += PWM1_low;  //输出为低电平，则给影射寄存器装载低电平时间长度
 170   2                      CCAP1L = (u8)CCAP1_tmp;                 //将影射寄存器写入捕获寄存器，先写CCAP0L
 171   2                      CCAP1H = (u8)(CCAP1_tmp >> 8);  //后写CCAP0H
 172   2              }
 173   1      
 174   1              if(CCF2)        //PCA模块2中断
 175   1              {
 176   2                      CCF2 = 0;               //清PCA模块1中断标志
 177   2                      if(P27) CCAP2_tmp += PCA_Timer2;        //输出为高电平，则给影射寄存器装载高电平时间长度
 178   2                      else    CCAP2_tmp += PWM2_low;  //输出为低电平，则给影射寄存器装载低电平时间长度
C51 COMPILER V9.59.0.0   PCA                                                               12/29/2023 20:34:28 PAGE 4   

 179   2                      CCAP2L = (u8)CCAP2_tmp;                 //将影射寄存器写入捕获寄存器，先写CCAP0L
 180   2                      CCAP2H = (u8)(CCAP2_tmp >> 8);  //后写CCAP0H
 181   2              }
 182   1      
 183   1      /*      if(CF)  //PCA溢出中断
 184   1              {
 185   1                      CF = 0;                 //清PCA溢出中断标志
 186   1              }
 187   1      */
 188   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    635    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     21       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
